---------------  CRUD IN FIREBASE DATABASE ---------------------------

1.  Create new project ( ng new FireDatabse
2.  Run your project
3.  Signup and login firebase account
4.  Go to console page
5.  Add a new project ( AngularCrud)
6.  Install Firebase: npm install firebase angularfire2 --save
7.  import{AngularFireDatabaseModule}from'angularfire2/database' in app.module.ts
8.  Go ot Project Overview --> Add Firebase to your web app -->select 
    configuration api(in console.firebase.com )
9.  Go to environment/environment.ts paste here.
     export const environment = {
				production: false,
				firebaseConfig : {
				apiKey: "AIzaSyD03KnDpoAyCexm485srOFVL3RdiK5oo8E",
				authDomain: "myfirebase1-82c9c.firebaseapp.com",
				databaseURL: "https://myfirebase1-82c9c.firebaseio.com",
				projectId: "myfirebase1-82c9c",
				storageBucket: "",
				messagingSenderId: "799211448105"
			  }
			};

10. import{environment}from'../environments/environment' in app.module.ts
11. add in imports:[ AngularFireDatabaseModule,
    AngularFireModule.initializeApp(environment.firebaseConfig)
12. Go to console.firebase, change the rules of read and write as true
13. Create a model file employee.model.ts
       import { SrvRecord } from "dns";
			export class Employee {
			$key:string;
			name:string;
			position:string;
			office:string;
			salary:string;
			}
14. Create  a service file employee.service.ts
     
--------------------------------------------------------------------------------------

Files:

CREATE DATA AND INSERT INTO DATABASE

                     app.module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import{FormsModule}from'@angular/forms';
import{AngularFireDatabaseModule}from'angularfire2/database';
import{environment}from'../environments/environment';
import { AppComponent } from './app.component';
import { AngularFireModule } from 'angularfire2';
import { EmployeeService } from './employee.service';


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule, FormsModule,AngularFireDatabaseModule,
    AngularFireModule.initializeApp(environment.firebaseConfig)
  ],
  providers: [EmployeeService],
  bootstrap: [AppComponent]
})
export class AppModule { }


                       employee.model.ts

import { SrvRecord } from "dns";
//The SRV record is a Domain Name System (DNS) resource record that is used to identify 
//computers that host specific services. 
//SRV resource records are used to locate domain controllers for Active Directory.
export class Employee {
    $key:string;
    name:string;
    position:string;
    office:string;
    salary:string;
}

                        employee.service.ts
import{Injectable,NgModule}from'@angular/core';
import{AngularFireDatabase,AngularFireList}from'angularfire2/database';
import{Employee}from'./employee.model';
@Injectable()
export class EmployeeService
{
    employeeList:AngularFireList<any>;
    selectedEmployee: Employee = new Employee();
    constructor(private firebase:AngularFireDatabase)
    {}
    
    insertEmployee(employee:Employee)
    {
       this.employeeList.push(
           {
               name:employee.name,
               position:employee.position,
               office:employee.office,
               salary:employee.salary
           }
       );
    }
    getData()
    {
        this.employeeList = this.firebase.list('employee');

        return this.employeeList;
    }


}

                               app.component.ts

import { Component } from '@angular/core';
import{EmployeeService}from'./employee.service';
import { Employee } from './employee.model';
import{NgForm}from'@angular/forms';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  providers:[EmployeeService]
})
export class AppComponent {
  constructor(private employeeService:EmployeeService){}

  onSubmit(employeeForm:NgForm)
  {
    this.employeeService.insertEmployee(employeeForm.value);
  }
  ngOnInit()
  {
    this.employeeService.getData();
  }
 
}
                             <h2> Welcome to My FireBase Database</h2>

<form #employeeForm="ngForm" (ngSubmit)="onSubmit(employeeForm)">
  Name:<input name="name" ngModel> <br><br>
  Position:<input name="position" ngModel> <br><br>
  Office:<input name="office" ngModel> <br><br>
  Salary:<input name="salary" ngModel> <br><br>
  <input type="submit" vamue="submit">
</form>


                             environment/environment.ts

export const environment = {
  production: false,
  firebaseConfig : {
    apiKey: "AIzaSyD03KnDpoAyCexm485srOFVL3RdiK5oo8E",
    authDomain: "myfirebase1-82c9c.firebaseapp.com",
    databaseURL: "https://myfirebase1-82c9c.firebaseio.com",
    projectId: "myfirebase1-82c9c",
    storageBucket: "",
    messagingSenderId: "799211448105"
  }
};
 
--------------------------------------------------------------------------------------

READ THE DATA FROM FIREBASE:


                               app.component.ts
								 
			               ngOnInit()
						  {
							this.resetForm();
							this.employeeService.getData();
							var x= this.employeeService.getData();
							x.snapshotChanges().subscribe(item=>
							{
							  this.employeeList=[];
							  item.forEach(element=>
							  {
								var y = element.payload.toJSON();
								y["$key"]=element.key;
								this.employeeList.push( y as Employee);
							  })
							});
						  }
						  

                                app.component.html
								
				<table id="customers">  
				<tr>
					<th>Name</th>
					<th>Position</th>
					<th>Office</th>
					<th>Salary</th>
					<th>EDIT</th>
					<th>DELETE</th>
			    </tr>
				<tr *ngFor="let employee of employeeList">
					<td>{{employee.name}}</td>
					<td>{{employee.position}}</td>
					<td>{{employee.office}}</td>
					<td>{{employee.salary}}</td>
					<td (click)="editData(employee)">
					     <a style="color:green;">EDIT</a>
					</td>
					<td (click)="onDelete(employee.$key)">
						<a style="color:red;">DELETE</a>
					</td>
				</tr>
				</table>
-----------------------------------------------------------------------------------				
				                 
DELETE A DATA IN DATABASE:
                              app.component.ts

                onDelete(key:string)
				{
				 if(confirm("Are you sure to delete?"))
				  {
				    this.employeeService.deleteEmployee(key);
							
				  }
                }

			                  employee.service.ts
							  
				deleteEmployee($key:string)
				{
					this.employeeList.remove($key);
				}
----------------------------------------------------------------------------------------				

UPDATE DATA IN DATABASE:

                              app.component.ts

				onSubmit(employeeForm:NgForm)
				  {
					if(employeeForm.value.$key==null)
						  this.employeeService.insertEmployee(employeeForm.value);
					else    
						  this.employeeService.updateEmployee(employeeForm.value);
				  }

				  editData(emp:Employee)
				  {
					this.employeeService.selectedEmployee=emp;
					this.employeeService.selectedEmployee= Object.assign({},emp);
				  }		

                               employee.service.ts

                 updateEmployee(employee:Employee)
				{
					this.employeeList.update(employee.$key,{
                                name:employee.name,
                                position:employee.position,
                                office:employee.office,
                                salary:employee.salary,

                              });

				}
-----------------------------------------------------------------------------------					

 RESET:
                              app.component.ts

                resetForm(employeeForm?:NgForm)
				{ 
					if(employeeForm!=null)

					employeeForm.reset();
					this.employeeService.selectedEmployee=
					{
					  $key:null,
					  name:'',
					  position:'',
					  office:'',
					  salary:'',
					}
				}	

-------------------------------------------------------------------------------------


           app.component.html
		   
		   
		   
<h2> Welcome to My FireBase Database</h2>

<form #employeeForm="ngForm" (ngSubmit)="onSubmit(employeeForm)">
  <input type="hidden" name="$key" [(ngModel)]="employeeService.selectedEmployee.$key"><br> 
  Name:<input name="name"  [(ngModel)]="employeeService.selectedEmployee.name" ngModel> <br><br>
  Position:<input name="position"  [(ngModel)]="employeeService.selectedEmployee.position" ngModel> <br><br>
  Office:<input name="office"  [(ngModel)]="employeeService.selectedEmployee.office" ngModel > <br><br>
  Salary:<input name="salary"  [(ngModel)]="employeeService.selectedEmployee.salary" ngModel> <br><br>
  <input type="submit" vamue="submit">
  <button type="button" (click)="resetForm(employeeForm)">reset</button>
</form>

<br><br>
<table id="customers">  
      <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Salary</th>
            <th>EDIT</th>
            <th>DELETE</th>
      </tr>
<tr *ngFor="let employee of employeeList">
              <td>{{employee.name}}</td>
              <td>{{employee.position}}</td>
              <td>{{employee.office}}</td>
              <td>{{employee.salary}}</td>
              <td (click)="editData(employee)">
                <a style="color:green;">EDIT</a>
              </td>
              <td (click)="onDelete(employee.$key)">
             <a style="color:red;">DELETE</a>
              </td>
</tr>
</table>

				